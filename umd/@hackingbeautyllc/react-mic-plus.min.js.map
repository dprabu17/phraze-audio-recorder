{"version":3,"sources":["webpack://react-mic/webpack/universalModuleDefinition","webpack://react-mic/webpack/bootstrap","webpack://react-mic/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://react-mic/./src/libs/AudioContext.js","webpack://react-mic/./src/libs/AudioRecorder.js","webpack://react-mic/./src/libs/MicrophoneRecorder.js","webpack://react-mic/./src/libs/Visualizer.js","webpack://react-mic/./src/components/ReactMic.js","webpack://react-mic/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","audioCtx","AudioContext","webkitAudioContext","analyser","createAnalyser","getAudioContext","getAnalyser","resetAnalyser","decodeAudioData","audioData","then","decodedData","recordingLength","leftchannel","rightchannel","sampleRate","startTime","recorder","audioInput","volume","onDataCallback","AudioRecorder","stream","mediaOptions","callbacks","_classCallCheck","this","onData","start","self","createGain","createMediaStreamSource","state","resume","connect","createScriptProcessor","createJavaScriptNode","onaudioprocess","e","console","log","left","inputBuffer","getChannelData","right","push","Float32Array","exportWav","Date","now","pause","getAudioTracks","forEach","track","stop","disconnect","suspend","mergeBuffers","channelBuffer","result","offset","lng","length","buffer","set","interleave","leftChannel","rightChannel","inputIndex","index","writeUTFBytes","view","string","setUint8","charCodeAt","leftBuffer","rightBuffer","interleaved","ArrayBuffer","DataView","setUint32","setUint16","setInt16","blob","Blob","type","stopTime","options","blobURL","URL","createObjectURL","onStartCallback","onStopCallback","onSaveCallback","onBlockCallback","onPauseCallback","constraints","audio","video","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","MicrophoneRecorder","onStart","onStop","onSave","onBlock","onPause","MicrophoneRecorder_classCallCheck","startRecording","mediaDevices","str","catch","err","alert","pauseRecording","stopRecording","blobObject","Visualizer","visualizeSineWave","canvasCtx","canvas","width","height","backgroundColor","strokeColor","bufferLength","fftSize","dataArray","Uint8Array","clearRect","draw","requestAnimationFrame","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","y","moveTo","lineTo","stroke","visualizeFrequencyBars","frequencyBinCount","getByteFrequencyData","barWidth","barHeight","hexToRgb","visualizeFrequencyCircles","reducedDataArray","sum","j","arc","Math","min","PI","fill","stepSize","hex","exec","parseInt","g","b","ReactMic","props","ReactMic_classCallCheck","_this","_possibleConstructorReturn","_Component","visualize","_this$props","visualSetting","_this$state","microphoneRecorder","componentDidMount","_this2","_props","audioElem","audioBitsPerSecond","mimeType","refs","visualizer","getContext","setState","clear","_props2","render","_props3","record","_state","external_root_React_commonjs2_react_commonjs_react_amd_react_default","a","createElement","ref","className","Component","defaultProps","__webpack_exports__","ReactMic_ReactMic"],"mappings":"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","file":"@hackingbeautyllc/react-mic-plus.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-mic\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"react-mic\"] = factory(root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\nlet analyser = audioCtx.createAnalyser();\n\nconst AudioContext  = {\n\n  getAudioContext() {\n    return audioCtx;\n  },\n\n  getAnalyser() {\n    return analyser;\n  },\n\n  resetAnalyser() {\n    analyser = audioCtx.createAnalyser();\n  },\n\n  decodeAudioData() {\n    audioCtx.decodeAudioData(audioData).then(function(decodedData) {\n      // use the decoded data here\n    });\n  }\n\n}\n\nexport default AudioContext;\n","/* Reference this: https://gist.github.com/meziantou/edb7217fddfbb70e899e */\n/*https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API*/\nimport AudioContext from './AudioContext';\n\nlet recordingLength= 0 // why can you not put this in constructor?\nlet leftchannel = [];\nlet rightchannel = [];\nlet sampleRate\nlet startTime\nlet mediaOptions\nlet recorder\nlet audioInput\nlet volume\nlet onDataCallback\n\nexport default class AudioRecorder {\n  constructor(stream, mediaOptions, callbacks) {\n    this.stream = stream\n    this.audioCtx = AudioContext.getAudioContext();\n    this.analyser = AudioContext.getAnalyser();\n    mediaOptions = mediaOptions\n    onDataCallback = callbacks.onData\n  }\n\n  start() {\n    const self = this\n    const { audioCtx, analyser } = this\n    const bufferSize = 8192;\n\n    volume = audioCtx.createGain()\n    audioInput = audioCtx.createMediaStreamSource(this.stream);\n    sampleRate = audioCtx.sampleRate\n\n    if(audioCtx && audioCtx.state === 'suspended') {\n      audioCtx.resume();\n    }\n\n    audioInput.connect(volume)\n\n    if (audioCtx.createScriptProcessor) {\n      recorder = audioCtx.createScriptProcessor(bufferSize, 2, 2);\n    } else {\n      recorder = audioCtx.createJavaScriptNode(bufferSize, 2, 2);\n    }\n\n    recorder.onaudioprocess = function(e){\n      console.log ('recording');\n\n      const left = e.inputBuffer.getChannelData(0);\n      const right = e.inputBuffer.getChannelData(1);\n\n      // // we clone the samples\n      leftchannel.push (new Float32Array (left));\n      rightchannel.push (new Float32Array (right));\n      recordingLength += bufferSize;\n\n      if(onDataCallback) {\n        onDataCallback(self.exportWav())\n      }\n    }\n\n    volume.connect(recorder)\n    audioInput.connect(analyser);\n    recorder.connect(analyser);\n    startTime = Date.now();\n  }\n\n  pause() {\n    const { stream, audioCtx } = this\n\n    stream.getAudioTracks().forEach((track) => {\n      track.stop()\n    })\n\n    volume.disconnect(audioCtx)\n    recorder.disconnect(audioCtx)\n    audioCtx.suspend();\n  }\n\n  stop() {\n    const { stream, audioCtx } = this\n\n    recordingLength= 0\n    leftchannel = [];\n    rightchannel = [];\n\n    stream.getAudioTracks().forEach((track) => {\n      track.stop()\n    })\n\n    volume.disconnect(this.audioCtx)\n    recorder.disconnect(this.audioCtx)\n    audioCtx.suspend();\n  }\n\n\n  mergeBuffers(channelBuffer, recordingLength){\n    var result = new Float32Array(recordingLength);\n    var offset = 0;\n    var lng = channelBuffer.length;\n    for (var i = 0; i < lng; i++){\n      var buffer = channelBuffer[i];\n      result.set(buffer, offset);\n      offset += buffer.length;\n    }\n    return result;\n  }\n\n  interleave(leftChannel, rightChannel){\n    const length = leftChannel.length + rightChannel.length;\n    const result = new Float32Array(length);\n\n    let inputIndex = 0;\n\n    for (var index = 0; index < length; ){\n      result[index++] = leftChannel[inputIndex];\n      result[index++] = rightChannel[inputIndex];\n      inputIndex++;\n    }\n    return result;\n  }\n\n  writeUTFBytes(view, offset, string){\n    var lng = string.length;\n    for (var i = 0; i < lng; i++){\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  }\n\n  exportWav() {\n    // we flat the left and right channels down\n    var leftBuffer = this.mergeBuffers( leftchannel, recordingLength );\n    var rightBuffer = this.mergeBuffers( rightchannel, recordingLength );\n    // we interleave both channels together\n    var interleaved = this.interleave( leftBuffer, rightBuffer );\n\n    // we create our wav file\n    var buffer = new ArrayBuffer(44 + interleaved.length * 2);\n    var view = new DataView(buffer);\n\n    // RIFF chunk descriptor\n    this.writeUTFBytes(view, 0, 'RIFF');\n    view.setUint32(4, 44 + interleaved.length * 2, true);\n    this.writeUTFBytes(view, 8, 'WAVE');\n    // FMT sub-chunk\n    this.writeUTFBytes(view, 12, 'fmt ');\n    view.setUint32(16, 16, true); // chunkSize\n    view.setUint16(20, 1, true); // wFormatTag\n    view.setUint16(22, 2, true); // wChannels: stereo (2 channels)\n    view.setUint32(24, sampleRate, true); // dwSamplesPerSec\n    view.setUint32(28, sampleRate * 4, true); // dwAvgBytesPerSec\n    view.setUint16(32, 4, true); // wBlockAlign\n    view.setUint16(34, 16, true); // wBitsPerSample\n    // data sub-chunk\n    this.writeUTFBytes(view, 36, 'data');\n    view.setUint32(40, interleaved.length * 2, true);\n\n    // write the PCM samples\n    var index = 44;\n    var volume = 1;\n    for (var i = 0; i < interleaved.length; i++) {\n        view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);\n        index += 2;\n    }\n\n    // our final blob\n    var blob = new Blob([view], { type: 'audio/wav' });\n\n    const blobObject =  {\n      blob      : blob,\n      startTime : startTime,\n      stopTime  : Date.now(),\n      options   : mediaOptions,\n      blobURL   : window.URL.createObjectURL(blob)\n    }\n\n    return blobObject\n  }\n\n}\n","import AudioContext from './AudioContext';\nimport AudioRecorder from './AudioRecorder';\n\nlet analyser;\nlet mediaRecorder;\nlet chunks = [];\nlet startTime;\nlet stream;\nlet mediaOptions;\nlet blobObject;\nlet onStartCallback;\nlet onStopCallback;\nlet onSaveCallback;\nlet onDataCallback;\nlet onBlockCallback;\nlet onPauseCallback;\nlet recorder\n\nconst constraints = { audio: true, video: false }; // constraints - only audio needed\n\nnavigator.getUserMedia = (navigator.getUserMedia ||\n                          navigator.webkitGetUserMedia ||\n                          navigator.mozGetUserMedia ||\n                          navigator.msGetUserMedia);\n\nexport class MicrophoneRecorder {\n  constructor(onStart, onStop, onSave, onData, onBlock, onPause, options) {\n    onStartCallback= onStart;\n    onStopCallback= onStop;\n    onSaveCallback = onSave;\n    onDataCallback = onData;\n    onBlockCallback = onBlock;\n    onPauseCallback = onPause;\n    mediaOptions= options;\n  }\n\n  startRecording=() => {\n    if (navigator.mediaDevices) {\n      console.log('getUserMedia supported.');\n\n      navigator.mediaDevices.getUserMedia(constraints)\n        .then((str) => {\n          stream = str;\n\n          if(onStartCallback) { onStartCallback() };\n\n          recorder = new AudioRecorder(str, mediaOptions, { onData: onDataCallback})\n          recorder.start()\n\n        }).catch((err) => {\n          onBlockCallback()\n        })\n\n    } else {\n      alert('Your browser does not support audio recording.  If you have an Iphone, you need to use Safari to record audio.');\n    }\n  }\n\n  pauseRecording() {\n    if(recorder) {\n\n      recorder.pause();\n      AudioContext.resetAnalyser();\n\n      if(onPauseCallback) { onPauseCallback() };\n    }\n  }\n\n  stopRecording() {\n    if(recorder) {\n      const blobObject = recorder.exportWav()\n\n      recorder.stop();\n      recorder = null;\n      AudioContext.resetAnalyser();\n\n      if(onStopCallback) { onStopCallback(blobObject) };\n      if(onSaveCallback) { onSaveCallback(blobObject) };\n    }\n  }\n\n\n}\n","import AudioContext from './AudioContext';\n\n\nlet drawVisual;\n\nconst Visualizer = {\n\n  visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    let analyser = AudioContext.getAnalyser();\n\n    const bufferLength = analyser.fftSize;\n    const dataArray = new Uint8Array(bufferLength);\n\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n\n      drawVisual = requestAnimationFrame(draw);\n\n      analyser = AudioContext.getAnalyser();\n\n      analyser.getByteTimeDomainData(dataArray);\n\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fillRect(0, 0, width, height);\n\n      canvasCtx.lineWidth = 2;\n      canvasCtx.strokeStyle = strokeColor;\n\n      canvasCtx.beginPath();\n\n      const sliceWidth = width * 1.0 / bufferLength;\n      let x = 0;\n\n      for(let i = 0; i < bufferLength; i++) {\n        const v = dataArray[i] / 128.0;\n        const y = v * height/2;\n\n        if(i === 0) {\n          canvasCtx.moveTo(x, y);\n        } else {\n          canvasCtx.lineTo(x, y);\n        }\n\n        x += sliceWidth;\n      }\n\n      canvasCtx.lineTo(canvas.width, canvas.height/2);\n      canvasCtx.stroke();\n    };\n\n    draw();\n  },\n\n  visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    const self = this;\n    let analyser = AudioContext.getAnalyser();\n    analyser.fftSize = 256;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n      drawVisual = requestAnimationFrame(draw);\n\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteFrequencyData(dataArray);\n\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fillRect(0, 0, width, height);\n\n      const barWidth = (width / bufferLength) * 2.5;\n      let barHeight;\n      let x = 0;\n\n      for(let i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i];\n\n        const rgb = self.hexToRgb(strokeColor);\n\n        // canvasCtx.fillStyle = `rgb(${barHeight+100},${rgb.g},${rgb.b})`;\n        canvasCtx.fillStyle = strokeColor;\n        canvasCtx.fillRect(x,height-barHeight/2,barWidth,barHeight/2);\n\n        x += barWidth + 1;\n      }\n    };\n\n    draw();\n  },\n\n  visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    const self = this;\n    let analyser = AudioContext.getAnalyser();\n    analyser.fftSize = 32;\n    const bufferLength = analyser.frequencyBinCount;\n\n    const dataArray = new Uint8Array(bufferLength);\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n\n      drawVisual = requestAnimationFrame(draw);\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteFrequencyData(dataArray);\n      const reductionAmount = 3;\n      const reducedDataArray = new Uint8Array(bufferLength / reductionAmount);\n\n      for (let i = 0; i < bufferLength; i += reductionAmount) {\n        let sum = 0;\n        for (let j = 0; j < reductionAmount; j++) {\n          sum += dataArray[i + j];\n        }\n         reducedDataArray[i/reductionAmount] = sum / reductionAmount;\n      }\n\n      canvasCtx.clearRect(0, 0, width, height);\n      canvasCtx.beginPath();\n      canvasCtx.arc(width / 2, height / 2, Math.min(height, width) / 2, 0, 2 * Math.PI);\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fill();\n      const stepSize = (Math.min(height, width) / 2.0) / (reducedDataArray.length);\n      canvasCtx.strokeStyle = strokeColor;\n\n      for (let i = 0; i < reducedDataArray.length; i++) {\n        canvasCtx.beginPath();\n        const normalized = reducedDataArray[i] / 128;\n        const r = (stepSize * i) + (stepSize * normalized);\n        canvasCtx.arc(width / 2, height / 2, r, 0, 2 * Math.PI);\n        canvasCtx.stroke();\n      }\n    };\n    draw();\n  },\n\n\n  hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n  }\n\n}\n\nexport default Visualizer;\n","// cool blog article on how to do this: http://www.smartjava.org/content/exploring-html5-web-audio-visualizing-sound\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\n\n// distortion curve for the waveshaper, thanks to Kevin Ennis\n// http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion\n\nimport React, { Component }   from 'react'\nimport { string, number, bool, func } from 'prop-types';\nimport { MicrophoneRecorder } from '../libs/MicrophoneRecorder';\nimport AudioContext           from '../libs/AudioContext';\nimport AudioPlayer            from '../libs/AudioRecorder';\nimport Visualizer             from '../libs/Visualizer';\n\n\nexport default class ReactMic extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      microphoneRecorder  : null,\n      canvas              : null,\n      canvasCtx           : null\n    }\n  }\n\n  componentDidMount() {\n    const {\n      onSave,\n      onStop,\n      onStart,\n      onData,\n      onBlock,\n      onPause,\n      audioElem,\n      audioBitsPerSecond,\n      mimeType\n    } = this.props;\n    const { visualizer } = this.refs;\n    const canvas = visualizer;\n    const canvasCtx = canvas.getContext(\"2d\");\n    const options = {\n      audioBitsPerSecond : audioBitsPerSecond,\n      mimeType           : mimeType\n    }\n\n    if(audioElem) {\n      AudioRecorder.create(audioElem);\n\n      this.setState({\n        canvas              : canvas,\n        canvasCtx           : canvasCtx\n      }, () => {\n        this.visualize();\n      });\n    } else {\n\n      this.setState({\n        microphoneRecorder  : new MicrophoneRecorder(\n                                onStart,\n                                onStop,\n                                onSave,\n                                onData,\n                                onBlock,\n                                onPause,\n                                options\n                              ),\n        canvas              : canvas,\n        canvasCtx           : canvasCtx\n      }, () => {\n        this.visualize();\n      });\n    }\n\n  }\n\n  visualize = () => {\n    const self = this;\n    const { backgroundColor, strokeColor, width, height, visualSetting } = this.props;\n    const { canvas, canvasCtx } = this.state;\n\n    if(visualSetting === 'sinewave') {\n      Visualizer.visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n    } else if(visualSetting === 'frequencyBars') {\n      Visualizer.visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n    } else if(visualSetting === 'frequencyCircles') {\n      Visualizer.visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n    }\n\n  }\n\n  clear() {\n    const { width, height } = this.props;\n    const { canvasCtx  } = this.state;\n    canvasCtx.clearRect(0, 0, width, height);\n  }\n\n  render() {\n    const { record, onStop, pause, width, height } = this.props;\n    const { microphoneRecorder, canvasCtx } = this.state;\n\n    if(record) {\n      if(microphoneRecorder) {\n        if(pause) {\n          microphoneRecorder.pauseRecording();\n        } else {\n          microphoneRecorder.startRecording();\n        }\n      }\n    } else {\n      if (microphoneRecorder) {\n        microphoneRecorder.stopRecording(onStop);\n        this.clear();\n      }\n    }\n\n    return (<canvas ref=\"visualizer\" height={height} width={width} className={this.props.className}></canvas>);\n  }\n}\n\nReactMic.propTypes = {\n  backgroundColor : string,\n  strokeColor     : string,\n  className       : string,\n  audioBitsPerSecond: number,\n  mimeType        : string,\n  height          : number,\n  record          : bool.isRequired,\n  onStop          : func,\n  onData          : func\n};\n\nReactMic.defaultProps = {\n  backgroundColor   : 'rgba(255, 255, 255, 0.5)',\n  strokeColor       : '#000000',\n  className         : 'visualizer',\n  audioBitsPerSecond: 128000,\n  mimeType          : 'audio/webm;codecs=opus',\n  record            : false,\n  width             : 640,\n  height            : 100,\n  visualSetting     : 'sinewave'\n}\n","import ReactMic from './components/ReactMic';\n\nexport { ReactMic };\n"],"sourceRoot":""}